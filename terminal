mkdir -p src
mv config.html src/config.html
git rm static/config.html
git add src/config.html
git commit -m "refactor: move config.html to src directory"
git tag -a v1.1.0 -m "Version 1.1.0 - Initial project structure"

# 2. Setup Node.js project
pnpm init
pnpm add express @google/generative-ai
pnpm add -D typescript @types/node @types/express

# Create tsconfig.json
cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules"]
}
EOF

# Update package.json version
sed -i 's/"version": ".*"/"version": "1.1.1"/' package.json
git add package.json tsconfig.json
git commit -m "feat: initialize Node.js project with TypeScript"

# 3. Add source files
cat > src/opensubtitles.js << 'EOF'
function getSubtitles() {
    // Implementation will go here
    return Promise.resolve([]);
}

module.exports = {
    getSubtitles
};
EOF

git add src/opensubtitles.js
git commit -m "feat: add initial source files"

# 4. Update Docker configuration
cat > Dockerfile << 'EOF'
# Build stage
FROM node:20-alpine AS builder

# Install pnpm
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json ./

# Install dependencies
RUN pnpm install

# Copy source code
COPY . .

# Build the application
RUN pnpm build

# Production stage
FROM node:20-alpine AS production

# Install system utilities
RUN apk add --no-cache \
    bash \
    curl \
    htop \
    nano \
    procps \
    tcpdump \
    vim

# Set working directory
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files and install production dependencies
COPY package.json ./
RUN pnpm install --prod

# Copy built files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/static ./static

# Expose port
EXPOSE 7000

# Start the application
CMD ["node", "dist/index.js"]
EOF

# Update version and commit Docker changes
sed -i 's/"version": ".*"/"version": "1.1.2"/' package.json
sed -i 's/Version .*/Version 1.1.2/' src/config.html
git add Dockerfile package.json src/config.html
git commit -m "feat: add multi-stage Docker build"
git tag -a v1.1.2 -m "Version 1.1.2 - Production-ready Docker setup"

# Push all changes
git push origin main
git push origin v1.1.0
git push origin v1.1.1
git push origin v1.1.2

# Try building
docker compose up -d --build 

# Create src directory and files
mkdir -p src

# Create src/index.js
cat > src/index.js << 'EOF'
const express = require('express');
const { getSubtitles } = require('./opensubtitles');
const { translateSubtitles } = require('./subtitles');
const { processFiles } = require('./processfiles');

const app = express();
const port = process.env.PORT || 7000;

app.use(express.json());

// ... rest of the server code will go here
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
EOF

# Create src/opensubtitles.js
cat > src/opensubtitles.js << 'EOF'
function getSubtitles() {
    // Implementation will go here
    return Promise.resolve([]);
}

module.exports = {
    getSubtitles
};
EOF

# Create src/subtitles.js
cat > src/subtitles.js << 'EOF'
async function translateSubtitles(subtitles) {
    // Implementation will go here
    return subtitles;
}

module.exports = { translateSubtitles };
EOF

# Create src/processfiles.js
cat > src/processfiles.js << 'EOF'
function processFiles(files) {
    // Implementation will go here
    return files;
}

module.exports = { processFiles };
EOF

# Update package.json to use CommonJS
cat > package.json << 'EOF'
{
  "name": "stremio-aitranslator",
  "version": "1.1.3",
  "description": "Stremio addon for real-time subtitle translation using Google's Gemini AI",
  "main": "dist/index.js",
  "type": "commonjs",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "tsc -w"
  },
  "dependencies": {
    "express": "^4.18.2",
    "@google/generative-ai": "^0.2.0"
  },
  "devDependencies": {
    "typescript": "^5.3.3",
    "@types/node": "^20.11.0",
    "@types/express": "^4.17.21"
  },
  "author": "",
  "license": "MIT"
}
EOF

# Update version in config.html
sed -i 's/Version .*/Version 1.1.3/' src/config.html

# Commit these changes
git add src/* package.json
git commit -m "feat: add initial server implementation \
- Add basic Express server setup
- Add placeholder implementations for core functionality
- Fix module system to use CommonJS
- Bump version to 1.1.3"

# Create new version tag
git tag -a v1.1.3 -m "Version 1.1.3 - Initial server implementation"

# Push changes
git push origin main
git push origin v1.1.3

# Try building again
docker compose up -d --build 

# Update version in package.json
sed -i 's/"version": ".*"/"version": "1.1.4"/' package.json
sed -i 's/Version .*/Version 1.1.4/' src/config.html

# Commit changes
git add src/*.js package.json
git commit -m "fix: standardize module system to CommonJS \
- Convert all files to use require/module.exports
- Fix import/export inconsistencies
- Bump version to 1.1.4"

# Create new version tag
git tag -a v1.1.4 -m "Version 1.1.4 - Standardized module system"

# Push changes
git push origin main
git push origin v1.1.4

# Try building again
docker compose up -d --build 